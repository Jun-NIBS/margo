function [varargout]=sortROIs(varargin)

for i = 1:nargin
    switch i
        case 1
            centers = varargin{i};
        case 2
            ROI_coords = varargin{i};
        case 3
            ROI_bounds = varargin{i};
        case 4
            mazeOri = varargin{i};
        case 5
            im = varargin{i};
    end
end

%% Separate right-side down ROIs (0) from right to left

y = centers(:,2);
[val,perm_y] = sort(y);                                % Sort ROI yCoords from left to right
row_breaks = find([0;diff(val)>std(diff(val))]);    % Find breaks between rows


hold on
for i = 1:length(centers)
    th = text(centers(perm_y(i),1),centers(perm_y(i),2),num2str(i),'Color',[1 0 1]);
end
hold off

% find a final permutation by sorting each clustered set of y 
% coords by their respective x coordinates
for i = 1:length(row_breaks)
    switch i
        case 1
            
            py_subset = perm_y(1:row_breaks(i)-1);          % get subset of perm vector for current row
            [val,perm_x] = sort(centers(py_subset,1));      % sort x coords for current row
            perm_y(1:row_breaks(i)-1) = py_subset(perm_x);    % reassign the permuted permutation to full perm vector
            
            hold on
            for i = 1:length(centers)
                th = text(centers(perm_y(i),1),centers(perm_y(i),2),num2str(i),'Color',[1 0 1]);
            end
            hold off
            
        case length(row_breaks)
            
            py_subset = perm_y(row_breaks(i):end);
            [val,perm_x] = sort(centers(py_subset,1));
            perm_y(row_breaks(i):end) = py_subset(perm_x);
            
        otherwise
            
            py_subset = perm_y(row_breaks(i-1):row_breaks(i)-1);
            [val,perm_x] = sort(centers(py_subset,1));
            perm_y(row_breaks(i-1):row_breaks(i)-1) = py_subset(perm_x);
    end
end

% Sort ROI and center coords by the permutation vector defined
for i = 1:nargout
    switch i
        case 1
            varargout{i} = centers(perm_y,:);
        case 2
            varargout{i} = ROI_coords(perm_y,:);
        case 3
            varargout{i} = ROI_bounds(perm_y,:);
        case 4
            varargout{i} = mazeOri(perm_y,:);
    end

end


end



